let agentPaths = {
  agent1: [
    [[31, 26], 25],
    [[30, 26], 24],
    [[29, 26], 23],
    [[28, 26], 22],
    [[27, 26], 21],
    [[27, 27], 20],
    [[26, 27], 19],
    [[26, 28], 18],
    [[25, 28], 17],
    [[24, 28], 16],
    [[24, 27], 15],
    [[24, 26], 14],
    [[23, 26], 13],
    [[22, 26], 12],
    [[21, 26], 11],
    [[20, 26], 10],
    [[19, 26], 9],
    [[18, 26], 8],
    [[17, 26], 7],
    [[17, 25], 6],
    [[17, 24], 5],
    [[16, 24], 4],
    [[15, 24], 3],
    [[14, 24], 2],
    [[13, 24], 1],
    [[13, 23], 0],
  ],
  agent2: [
    [[16, 2], 40],
    [[16, 3], 39],
    [[16, 4], 38],
    [[16, 5], 37],
    [[16, 6], 36],
    [[17, 6], 35],
    [[18, 6], 34],
    [[19, 6], 33],
    [[19, 7], 32],
    [[19, 8], 31],
    [[19, 9], 30],
    [[19, 10], 29],
    [[19, 11], 28],
    [[20, 11], 27],
    [[20, 12], 26],
    [[20, 13], 25],
    [[20, 14], 24],
    [[20, 15], 23],
    [[20, 16], 22],
    [[21, 16], 21],
    [[21, 17], 20],
    [[21, 18], 19],
    [[21, 19], 18],
    [[22, 19], 17],
    [[22, 20], 16],
    [[22, 21], 15],
    [[22, 22], 14],
    [[23, 22], 13],
    [[24, 22], 12],
    [[25, 22], 11],
    [[26, 22], 10],
    [[26, 23], 9],
    [[26, 24], 8],
    [[27, 24], 7],
    [[28, 24], 6],
    [[28, 25], 5],
    [[28, 26], 4],
    [[29, 26], 3],
    [[30, 26], 2],
    [[31, 26], 1],
    [[32, 26], 0],
  ],
  agent3: [
    [[6, 32], -1],
    [[6, 32], 0],
  ],
  agent4: [
    [[8, 36], 10],
    [[8, 35], 9],
    [[7, 35], 8],
    [[6, 35], 7],
    [[5, 35], 6],
    [[4, 34], 4],
    [[3, 34], 3],
    [[2, 34], 2],
    [[1, 34], 1],
    [[1, 33], 0],
  ],
  agent5: [
    [[32, 4], 41],
    [[31, 4], 40],
    [[31, 5], 39],
    [[31, 6], 38],
    [[32, 6], 37],
    [[32, 7], 36],
    [[32, 8], 35],
    [[32, 9], 34],
    [[31, 9], 33],
    [[31, 10], 32],
    [[31, 11], 31],
    [[30, 11], 30],
    [[30, 12], 29],
    [[30, 13], 28],
    [[30, 14], 27],
    [[29, 14], 26],
    [[28, 14], 25],
    [[28, 15], 24],
    [[28, 16], 23],
    [[28, 17], 22],
    [[28, 18], 21],
    [[28, 19], 20],
    [[28, 20], 19],
    [[28, 21], 18],
    [[28, 22], 17],
    [[28, 23], 16],
    [[28, 24], 15],
    [[28, 25], 14],
    [[28, 26], 13],
    [[28, 27], 12],
    [[28, 28], 11],
    [[28, 29], 10],
    [[28, 30], 9],
    [[28, 31], 8],
    [[28, 32], 7],
    [[28, 33], 6],
    [[28, 34], 5],
    [[28, 35], 4],
    [[28, 36], 3],
    [[27, 36], 2],
    [[26, 36], 1],
    [[26, 37], 0],
  ],
  agent6: [
    [[19, 36], 29],
    [[18, 36], 28],
    [[17, 36], 27],
    [[16, 36], 26],
    [[15, 36], 25],
    [[14, 36], 24],
    [[14, 35], 23],
    [[14, 34], 22],
    [[14, 33], 21],
    [[14, 32], 20],
    [[14, 31], 19],
    [[14, 30], 18],
    [[14, 29], 17],
    [[14, 28], 16],
    [[14, 27], 15],
    [[13, 27], 14],
    [[12, 27], 13],
    [[12, 26], 12],
    [[12, 25], 11],
    [[12, 24], 10],
    [[11, 24], 9],
    [[10, 24], 8],
    [[10, 23], 7],
    [[10, 22], 6],
    [[10, 21], 5],
    [[10, 20], 4],
    [[9, 20], 3],
    [[8, 20], 2],
    [[8, 19], 1],
    [[8, 18], 0],
  ],
  agent7: [
    [[16, 20], 30],
    [[15, 20], 29],
    [[14, 20], 28],
    [[14, 21], 27],
    [[13, 21], 26],
    [[12, 21], 25],
    [[12, 22], 24],
    [[12, 23], 23],
    [[11, 23], 22],
    [[10, 23], 21],
    [[10, 24], 20],
    [[9, 24], 19],
    [[8, 24], 18],
    [[8, 25], 17],
    [[8, 26], 16],
    [[8, 27], 15],
    [[8, 28], 14],
    [[7, 28], 13],
    [[7, 29], 12],
    [[7, 30], 11],
    [[6, 30], 10],
    [[5, 30], 9],
    [[5, 31], 8],
    [[5, 32], 7],
    [[5, 33], 6],
    [[5, 34], 5],
    [[5, 35], 4],
    [[5, 36], 3],
    [[4, 36], 2],
    [[4, 37], 1],
    [[4, 38], 0],
  ],
  agent8: [
    [[18, 11], 23],
    [[19, 11], 22],
    [[20, 11], 21],
    [[20, 12], 20],
    [[20, 13], 19],
    [[20, 14], 18],
    [[20, 15], 17],
    [[20, 16], 16],
    [[21, 16], 15],
    [[21, 17], 14],
    [[21, 18], 13],
    [[20, 18], 12],
    [[20, 19], 11],
    [[20, 20], 10],
    [[20, 21], 9],
    [[20, 22], 8],
    [[20, 23], 7],
    [[20, 24], 6],
    [[21, 24], 5],
    [[21, 25], 4],
    [[21, 26], 3],
    [[22, 26], 2],
    [[22, 27], 1],
    [[22, 28], 0],
  ],
  agent9: [
    [[38, 23], 36],
    [[37, 23], 35],
    [[36, 23], 34],
    [[35, 23], 33],
    [[34, 23], 32],
    [[33, 23], 31],
    [[32, 23], 30],
    [[32, 24], 29],
    [[31, 24], 28],
    [[30, 24], 27],
    [[29, 24], 26],
    [[28, 24], 25],
    [[27, 24], 24],
    [[26, 24], 23],
    [[26, 25], 22],
    [[25, 25], 21],
    [[25, 26], 20],
    [[24, 26], 19],
    [[23, 26], 18],
    [[22, 26], 17],
    [[21, 26], 16],
    [[20, 26], 15],
    [[19, 26], 14],
    [[18, 26], 13],
    [[17, 26], 12],
    [[16, 26], 11],
    [[15, 26], 10],
    [[15, 27], 9],
    [[14, 27], 8],
    [[13, 27], 7],
    [[12, 27], 6],
    [[11, 27], 5],
    [[10, 27], 4],
    [[9, 27], 3],
    [[8, 27], 2],
    [[8, 28], 1],
    [[8, 29], 0],
  ],
  agent10: [
    [[18, 37], 19],
    [[18, 36], 18],
    [[18, 35], 17],
    [[18, 34], 16],
    [[18, 33], 15],
    [[18, 32], 14],
    [[19, 32], 13],
    [[19, 31], 12],
    [[19, 30], 11],
    [[20, 30], 10],
    [[20, 29], 9],
    [[21, 29], 8],
    [[22, 29], 7],
    [[22, 28], 6],
    [[22, 27], 5],
    [[22, 26], 4],
    [[23, 26], 3],
    [[24, 26], 2],
    [[25, 26], 1],
    [[26, 26], 0],
  ],
};
let gridMaze = [
  [
    0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
  ],
  [
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,
    0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0,
  ],
  [
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1,
  ],
  [
    0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
  ],
  [
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
  ],
  [
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
  ],
  [
    0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1,
  ],
  [
    0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
  ],
  [
    0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
  ],
  [
    1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
  ],
  [
    0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,
  ],
  [
    1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1,
    0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,
  ],
  [
    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,
    1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0,
  ],
  [
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,
  ],
  [
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
  ],
  [
    0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0,
  ],
  [
    0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0,
  ],
  [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
  ],
  [
    0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
  [
    0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
  ],
  [
    0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
  ],
];
const gridContainer = document.getElementById("grid-container");
const timeSlider = document.getElementById("time-slider");
const maxTime = Math.max(
  ...Object.values(agentPaths).flatMap((path) => path.map((point) => point[1]))
);

function createGrid() {
  for (let i = 0; i < gridMaze.length; i++) {
    for (let j = 0; j < gridMaze[i].length; j++) {
      const cell = document.createElement("div");
      cell.classList.add("cell");
      if (gridMaze[i][j] === 1) {
        cell.classList.add("stone");
      }
      gridContainer.appendChild(cell);
    }
  }
}

function updatePaths(time) {
  const agents = Object.keys(agentPaths);

  agents.forEach((agent) => {
    const agentPath = agentPaths[agent];
    const currentPos = agentPath.find((point) => point[1] === time);

    if (currentPos) {
      const [x, y] = currentPos[0];
      const index = x * gridMaze[0].length + y;
      const cell = gridContainer.children[index];
      const agentPathDiv = document.createElement("div");
      agentPathDiv.classList.add("agent-path");
      agentPathDiv.style.backgroundColor = stringToColor(agent); // Function to get different colors
      cell.appendChild(agentPathDiv);
    }
  });
}

function stringToColor(str) {
  let hash = 0;
  let color = "#";
  let i;
  let value;
  let strLength;

  if (!str) {
    return color + "333333";
  }

  strLength = str.length;

  for (i = 0; i < strLength; i++) {
    hash = str.charCodeAt(i) + ((hash << str[str.length - 1]) - hash);
  }

  for (i = 0; i < 3; i++) {
    value = (hash >> (i * 8)) & 0xff;
    color += ("00" + value.toString(16)).substr(-2);
  }

  return color;
}

timeSlider.addEventListener("input", function () {
  const currentTime = parseInt(this.value);
  clearPaths();
  updatePaths(currentTime);
});

function clearPaths() {
  const agentPathsDivs = document.querySelectorAll(".agent-path");
  agentPathsDivs.forEach((div) => div.remove());
}

createGrid();
updatePaths(0);
